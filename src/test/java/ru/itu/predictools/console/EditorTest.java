package ru.itu.predictools.console;

import org.junit.Before;
import org.junit.Test;
import ru.itu.predictools.registry.SearchResultEntry;

import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedList;

public class EditorTest {
    private static final String PATH = System.getProperty("user.dir") + "\\";
    private static final String DICTIONARY_FILE = "getDictionary.txt";
    private static final String INPUT_FILE = "input.txt";
    private static final int EPOCH_TIME_M = 600; //900
    private static final int EPOCH_TIME_S = 1200; //3600

    Console console;

    @Before
    public void init() throws IOException {
        console = new Console(PATH + DICTIONARY_FILE, PATH + INPUT_FILE);
    }

    @Test
    public void checkInput() throws IOException, InterruptedException {
        //"hello home slices".chars().parallel().forEach(c->System.out.print((char)c));
        //System.out.println();

        String keyContent;
        System.out.println();
        System.out.println(" 5) произвольная двумерная клавиатура (2d 16 клавиш по 4 букв.алфавита на клавишу)");
        System.out.println("    с ручным распределением алфавита (CR spelling - одна стимуляция = одно измерение = группа символов (строка или столбец)");
        System.out.println("   размер алфавита: " + console.keyboardM.getAlphabet().size());
        System.out.println("   алфавит: " + Arrays.toString(console.keyboardM.getAlphabet().chars()));
        System.out.print("   клавиши по буквам: "); Arrays.stream(console.keyboardM.getCharKeyMap()).forEach(k->System.out.print("["+k.getKeyContent()+"]")); System.out.print("\n");
        System.out.print("   клавиши: " + console.keyboardM.getKeys().length + " шт.");
        for(int i=0; i < console.keyboardM.getKeys().length; i++){
            if(console.keyboardM.getKeys()[i] != null) keyContent = console.keyboardM.getKeys()[i].getKeyContent();
            else  keyContent="";
            System.out.print("[" + keyContent + "]");
        }
        System.out.println();
    }

    @Test
    public void testKeyDownEmulator() throws InterruptedException {

        System.out.print("+"+new String(new char[23]).replace("\0", "-")+"+"+new String(new char[12]).replace("\0", "-")+"+");
        System.out.println("+"+new String(new char[23]).replace("\0", "-")+"+"+new String(new char[12]).replace("\0", "-")+"+");
        System.out.print("| Групповой ввод" + new String(new char[21]).replace("\0", " ") + "|");
        System.out.println("| Посимвольный ввод" + new String(new char[18]).replace("\0", " ") + "|");
        System.out.print("+"+new String(new char[23]).replace("\0", "-")+"+"+new String(new char[12]).replace("\0", "-")+"+");
        System.out.println("+"+new String(new char[23]).replace("\0", "-")+"+"+new String(new char[12]).replace("\0", "-")+"+");
        System.out.print("| Варианты" + new String(new char[14]).replace("\0", " ") + "| Частота    |");
        System.out.println("| Варианты" + new String(new char[14]).replace("\0", " ") + "| Частота    |");
        System.out.print("+"+new String(new char[23]).replace("\0", "-")+"+"+new String(new char[12]).replace("\0", "-")+"+");
        System.out.println("+"+new String(new char[23]).replace("\0", "-")+"+"+new String(new char[12]).replace("\0", "-")+"+");

        Integer tM=0, tS=0, totalM=0, totalS=0, countM=0, countS=0;
        String string="";
        for (int i = 0; i < console.inputWords.length(); i++) {//char to key mapping and reflecting keyboard input into text, generated by interpreting pushed keyboard keys
            console.phraseM.push(console.keyboardM.getKey(console.inputWords.charAt(i)));//keyboard with group-symbol keys (Multi) -- key pushed
            console.phraseS.push(console.keyboardS.getKey(console.inputWords.charAt(i)));//keyboard with single symbol keys -- key pushed
            //how we have some variants and can use them to fast input

            LinkedList<SearchResultEntry> variantsM = console.phraseM.getVariants(), variantsS = console.phraseS.getVariants();
            int variantsMSize = variantsM.size(), variantsSSize = variantsS.size();
            int cycles = Math.max(variantsMSize, variantsSSize);
            if(cycles < 1) continue;

            if(console.inputWords.charAt(i) == ' '){
                tM=0;
                tS = 0;
                countM++;
                countS++;
            }
            string = "-итерация-" + i + "-слово-" + countM;
            System.out.println(string + new String(new char[75-string.length()]).replace("\0", "-") +  "+");
            for (int j = 0; j < cycles; j++) {
                if (variantsMSize > j) {
                    tM += EPOCH_TIME_M;
                    totalM += EPOCH_TIME_M;
                    System.out.print("| " + variantsM.get(j).getWord() + new String(new char[22 - variantsM.get(j).getWord().length()]).replace("\0", " ") + "| T:" + tM + new String(new char[9 - Integer.toString(tM).length()]).replace("\0", " ") + "|");
                }
                else
                    System.out.print("| "+ new String(new char[22]).replace("\0", " ") + "| T:" + tM + new String(new char[9 - Integer.toString(tM).length()]).replace("\0", " ") + "|");
                if (variantsSSize > j) {
                    tS += EPOCH_TIME_S;
                    totalS += EPOCH_TIME_S;
                    System.out.print("| " + variantsS.get(j).getWord() + new String(new char[22 - variantsS.get(j).getWord().length()]).replace("\0", " ") + "| T:" + tS + new String(new char[9 - Integer.toString(tS).length()]).replace("\0", " ") + "|");
                }
                else
                    System.out.print("| "+ new String(new char[22]).replace("\0", " ") + "| T:" + tS + new String(new char[9 - Integer.toString(tS).length()]).replace("\0", " ") + "|");
                System.out.println();
            }

//            phraseM.fillPredictiveKeys(console.keyboardM);
//            System.out.print(phraseM.variants.charAt(i));
//            Thread.sleep(1); //emulation of P300 latency
        }
        string = "-ИТОГИ-";
        System.out.println("+"+ string + new String(new char[74-string.length()]).replace("\0", "-") +  "+");
        string = "Всего потрачено на ввод текста";
        System.out.println("+"+ string + new String(new char[74-string.length()]).replace("\0", "-") +  "+");
        string = Integer.toString(totalM/6000)+" мин.";
        System.out.print("|" + string + new String(new char[36-string.length()]).replace("\0", " ") + "|");
        string = Integer.toString(totalS/6000)+" мин.";
        System.out.println("|" + string + new String(new char[36-string.length()]).replace("\0", " ") + "|");
        string = "Количество слов";
        System.out.println("+"+ string + new String(new char[74-string.length()]).replace("\0", "-") +  "+");
        string = Integer.toString(countM);
        System.out.print("|" + string + new String(new char[36-string.length()]).replace("\0", " ") + "|");
        string = Integer.toString(countS);
        System.out.println("|" + string + new String(new char[36-string.length()]).replace("\0", " ") + "|");
        string = "Среднее время на одно слово";
        System.out.println("+"+ string + new String(new char[74-string.length()]).replace("\0", "-") +  "+");
        string = Float.toString(totalM/countM/1000)+" сек.";
        System.out.print("|" + string + new String(new char[36-string.length()]).replace("\0", " ") + "|");
        string = Float.toString(totalS/countS/1000)+" сек.";
        System.out.println("|" + string + new String(new char[36-string.length()]).replace("\0", " ") + "|");
        System.out.print("+"+new String(new char[74]).replace("\0", "=")+"+");
    }
}
